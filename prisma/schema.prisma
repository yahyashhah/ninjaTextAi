generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserApiLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [clerkUserId])
  count     Int      @default(0)
  credits   Int      @default(0)
  refId     String?
  rewarded  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId      String   @unique
  firstName        String?
  lastName         String?
  email            String? @unique
  profileImageUrl  String?
  isPro            Boolean  @default(false)
  isAdmin          Boolean  @default(false) // Add admin field
  proAccessGrantedBy String? 
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  apiLimit         UserApiLimit?
  subscription     UserSubscription?
  reports          UserReports[]
  reportsHistory   ReportsHistory[]
  referralLink     UserReferralLinks?
  referrals        ReferralReward[] @relation("referrals")
  referredBy       ReferralReward[] @relation("referredBy")
  templates        UploadTemplates[]
  organizationMemberships OrganizationMember[]
  
  // Add these new relations for tracking
  reportEvents     ReportEvent[]
  userActivities   UserActivity[]
  systemErrors     SystemError[]
  feedbacks        Feedback[] 
}

model OrganizationSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkOrgId             String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeSeatPriceId      String?
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  baseSeats              Int       @default(5)
  extraSeats             Int       @default(0)
  totalSeats             Int       @default(5)
  
  members                OrganizationMember[]
}

model OrganizationMember {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String
  userId         String
  role           String   @default("member")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   OrganizationSubscription @relation(fields: [organizationId], references: [clerkOrgId])
  user           User                     @relation(fields: [userId], references: [clerkUserId])
  
  @@unique([organizationId, userId])
}

model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @unique
  user                   User      @relation(fields: [userId], references: [clerkUserId])
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model UserReports {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User     @relation(fields: [userId], references: [clerkUserId])
  reportName String?
  reportText String?
  tag        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ReportsHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User     @relation(fields: [userId], references: [clerkUserId])
  reportName String?
  reportText String?
  tag        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserReferralLinks {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [clerkUserId])
  refId     String?
  discount  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReferralReward {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  referrerId     String
  referrer       User     @relation("referrals", fields: [referrerId], references: [clerkUserId])
  referredUserId String
  referred       User     @relation("referredBy", fields: [referredUserId], references: [clerkUserId])
  credited       Boolean  @default(false)
  createdAt      DateTime @default(now())
}

model UploadTemplates {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  user         User     @relation(fields: [userId], references: [clerkUserId])
  templateName String?
  instructions String?
  examples     String?
  reportTypes  String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ReportEvent {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  user            User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  reportType      String
  processingTime  Int?     // in milliseconds
  success         Boolean
  templateUsed    String?
  error           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([reportType])
  @@index([createdAt])
  @@index([success])
}

model UserActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  activity  String   // e.g., "login", "report_created", "template_created"
  metadata  String?  // JSON string for additional data
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([activity])
  @@index([createdAt])
}

model SystemError {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // e.g., "api_error", "login_error", "report_generation_error"
  message   String
  userId    String?
  user      User?    @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  metadata  String?  // JSON string for additional error context
  createdAt DateTime @default(now())

  @@index([type])
  @@index([createdAt])
  @@index([userId])
}
model Feedback {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  user        User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  rating      Int      // 1-5 stars
  comment     String?
  experience  String?  // Good, Bad, Neutral
  wantsToSee  String?  // Features user wants to see
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([rating])
}
