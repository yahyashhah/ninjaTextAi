generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserApiLimit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [clerkUserId])
  count     Int      @default(0)
  credits   Int      @default(0)
  refId     String?
  rewarded  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId       String   @unique
  firstName         String?
  lastName          String?
  email             String? @unique
  profileImageUrl   String?
  isPro             Boolean  @default(false)
  isAdmin           Boolean  @default(false)
  departmentAdmin   Boolean  @default(false)
  proAccessGrantedBy String? 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  apiLimit          UserApiLimit?
  subscription      UserSubscription?
  reports           UserReports[]
  reportsHistory    ReportsHistory[]
  referralLink      UserReferralLinks?
  referrals         ReferralReward[] @relation("referrals")
  referredBy        ReferralReward[] @relation("referredBy")
  templates         UploadTemplates[]
  organizationMemberships OrganizationMember[]
  reportEvents      ReportEvent[]
  userActivities    UserActivity[]
  systemErrors      SystemError[]
  feedbacks         Feedback[]
  departmentReports DepartmentReport[]
  departmentActivities DepartmentActivityLog[]
}

model OrganizationSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkOrgId             String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeSeatPriceId      String?
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  baseSeats              Int       @default(5)
  extraSeats             Int       @default(0)
  totalSeats             Int       @default(5)

  members                OrganizationMember[]
  organization           Organization? @relation(fields: [clerkOrgId], references: [clerkOrgId])
}

model OrganizationMember {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId     String
  userId             String
  role               String   @default("member")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  organization       Organization @relation(fields: [organizationId], references: [id])
  subscription       OrganizationSubscription? @relation(fields: [organizationId], references: [clerkOrgId]) // New relation

  user               User         @relation(fields: [userId], references: [clerkUserId])

  @@unique([organizationId, userId])
}

model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @unique
  user                   User      @relation(fields: [userId], references: [clerkUserId])
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model UserReports {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User     @relation(fields: [userId], references: [clerkUserId])
  reportName String?
  reportText String?
  tag        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ReportsHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  user       User     @relation(fields: [userId], references: [clerkUserId])
  reportName String?
  reportText String?
  tag        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserReferralLinks {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [clerkUserId])
  refId     String?
  discount  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReferralReward {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  referrerId     String
  referrer       User     @relation("referrals", fields: [referrerId], references: [clerkUserId])
  referredUserId String
  referred       User     @relation("referredBy", fields: [referredUserId], references: [clerkUserId])
  credited       Boolean  @default(false)
  createdAt      DateTime @default(now())
}

model UploadTemplates {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  user         User     @relation(fields: [userId], references: [clerkUserId])
  templateName String?
  instructions String?
  examples     String?
  reportTypes  String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ReportEvent {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  user            User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  reportType      String
  processingTime  Int?
  success         Boolean
  templateUsed    String?
  error           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([reportType])
  @@index([createdAt])
  @@index([success])
}

model UserActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User?     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  activity  String
  metadata  String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([activity])
  @@index([createdAt])
}

model SystemError {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  message   String
  userId    String?
  user      User?    @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  metadata  String?
  createdAt DateTime @default(now())

  @@index([type])
  @@index([createdAt])
  @@index([userId])
}

model Feedback {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  user        User     @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  rating      Int
  comment     String?
  experience  String?
  wantsToSee  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([rating])
}

model Organization {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkOrgId       String   @unique
  name             String
  description      String?
  location         String?
  type             String?
  memberCount      Int      @default(0)
  reportCount      Int      @default(0)
  lowAccuracyCount Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  subscription     OrganizationSubscription?
  members          OrganizationMember[]
  reports          DepartmentReport[]
  reviewQueue      ReviewQueueItem[]
  activityLogs     DepartmentActivityLog[]
  monthlyReports   DepartmentMonthlyReport[]

  @@index([name])
  @@index([type])
  @@index([createdAt])
}

model DepartmentReport {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  clerkUserId      String
  user             User     @relation(fields: [clerkUserId], references: [clerkUserId])
  reportType       String
  title            String
  content          String
  nibrsData        String?
  accuracyScore    Float    @default(100.0)
  status           String   @default("draft")
  flagged          Boolean  @default(false)
  flagReason       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  submittedAt      DateTime?
  reviewedAt       DateTime?

  reviewQueueItems ReviewQueueItem[]

  @@index([organizationId])
  @@index([clerkUserId])
  @@index([reportType])
  @@index([accuracyScore])
  @@index([status])
  @@index([createdAt])
  @@index([flagged])
}

model ReviewQueueItem {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  reportId         String
  report           DepartmentReport @relation(fields: [reportId], references: [id])
  accuracyScore    Float
  status           String   @default("pending")
  assignedTo       String?
  priority         String   @default("normal")
  dueDate          DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  resolvedAt       DateTime?

  @@index([organizationId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([accuracyScore])
}

model DepartmentActivityLog {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [clerkUserId])
  activityType     String
  description      String
  metadata         String?
  createdAt        DateTime @default(now())

  @@index([organizationId])
  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
}

model DepartmentMonthlyReport {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  month            Int
  year             Int
  totalReports     Int      @default(0)
  totalOfficers    Int      @default(0)
  averageAccuracy  Float    @default(0.0)
  offenses         String
  comparisonData   String
  generatedAt      DateTime @default(now())

  @@unique([organizationId, month, year])
  @@index([organizationId])
  @@index([year, month])
}